scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' +
fill = "Neighbourhood Group") +
theme_classic() +
scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' ,
fill = "Neighbourhood Group") +
theme_classic() +
scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' ,
fill = "Neighbourhood Group") +
theme_classic() +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6))
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' ,
fill = "Neighbourhood Group") +
theme_classic() +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
#Loading AirBnb 2015-2020 Data into a single dataframe and adding a column
#to identify which year the observation belongs to
setwd("C:/Users/Daniel/Dropbox/Data Science/NYC DSA/R/Exploratory Visualization and Shiny Project/AirBnB-NYC-2019-Visualization-Project")
airbnb_data = purrr::map_dfr(list.files(pattern="*.csv", full.names = TRUE),
~read.csv(.x) %>% mutate(year = sub(".csv$", "", basename(.x)),
year = sub("listings ", "", year),
year = as.factor(year)))
airbnb_data2015 = airbnb_data %>%
filter(year == '2015')
airbnb_data2015 = market_size_func(airbnb_data2015)
airbnb_data = market_size_func(airbnb_data)
market_size_years = airbnb_data %>%
group_by(year, neighbourhood_group) %>%
summarize(market_size = sum(availability_by_price))
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' ,
fill = "Neighbourhood Group") +
theme_classic() +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
View(airbnb_data2015)
mean(airbnb_data2015$price)
mean(airbnb_data2016$price)
mean(airbnb_data2015$availability_365)
mean(airbnb_data2016$availability_365)
ggplot(market_size_years, aes(x = year, y = market_size)) +
geom_bar(stat = 'identity',
aes(fill = reorder(neighbourhood_group, market_size))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Market Size Over Time",
subtitle="Divided by Neighbourhoods",
y = 'Market Size',
x = 'Year' ,
fill = "Neighbourhood Group") +
theme_classic() +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette="Reds") #Colors for neighbourhood group
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="tomato2")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="reds")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="Reds")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="Red")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="tomato2")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
View(airbnb_data2020)
library(shiny)
library(leaflet)#Leaflet is one of the most popular open-source JavaScript libraries for
#interactive maps. This leaflet R package makes it easy to integrate and control
#Leaflet maps in R.
library(leaflet.extras) #Provides a simple heat map function, addheatmap().
library(tidyverse) #Several tools to organize data
library(ggplot2) #Several tools for graphing
library(treemapify) # Allows easy creation of Treemap graph
library(scales) #Allows easily labeling of axis. Example:
#scale_x_continuous(labels = unit_format(unit = "K", scale = 1e-3))
library(lubridate) #Allows easy extraction of day, month, year
library(directlabels) #Allows labels on ggplot graphs
library(wesanderson) #Color palettes
year0 = airbnb_data2020
map = leaflet() %>% addProviderTiles(providers$CartoDB.Voyager)
year0 = airbnb_data2020
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
blur = 4,
intensity = NULL,
cellSize = 1,
radius = 1
)  %>%
addMarkers( #Adds markets in clusters. Have this as an option in Shiny
lng = year0$longitude,
lat = year0$latitude,
label = year0$host_id,
clusterOptions = markerClusterOptions()
)
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
blur = 4,
intensity = NULL,
cellSize = 1,
radius = 1
)  %>%
addMarkers( #Adds markets in clusters. Have this as an option in Shiny
lng = year0$longitude,
lat = year0$latitude,
label = year0$host_id,
clusterOptions = markerClusterOptions()
)
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
intensity = year0$reviews_this_year,
blur = 2,
max = quant_95_review_max,
cellSize = 2,
radius = 2
)
library(leaflet)#Leaflet is one of the most popular open-source JavaScript libraries for
#interactive maps. This leaflet R package makes it easy to integrate and control
#Leaflet maps in R.
library(leaflet.extras) #Provides a simple heat map function, addheatmap().
library(tidyverse) #Several tools to organize data
library(ggplot2) #Several tools for graphing
library(treemapify) # Allows easy creation of Treemap graph
library(scales) #Allows easily labeling of axis. Example:
#scale_x_continuous(labels = unit_format(unit = "K", scale = 1e-3))
library(lubridate) #Allows easy extraction of day, month, year
load ("C:/Users/Daniel/Dropbox/Data Science/NYC DSA/R/Exploratory Visualization and Shiny Project/AirBnB-NYC-2019-Visualization-Project/.RData")
View(airbnb_data2020)
View(airbnb_data2019)
names(airbnb_data2019)
names(airbnb_data2020)
airbnb_data2020$reviews_this_year = get_reviews(airbnb_data2020, airbnb_data2019)
airbnb_data2019$reviews_this_year = get_reviews(airbnb_data2019, airbnb_data2018)
get_reviews = function(df1, df2) {
### Get the number of reviews this year by susbtracting last years
### when there is no ID last year it just keeps the number of reviews.
### If the number comes negative it makes it 0, it happens in very few cases.
df1$reviews_this_year =
df1$number_of_reviews -
df2$number_of_reviews[match(df1$id, df2$id)]
df1$reviews_this_year =
ifelse(is.na(df1$reviews_this_year),
df1$number_of_reviews,
df1$reviews_this_year)
df1$reviews_this_year =
ifelse(df1$reviews_this_year < 0,
0,
df1$reviews_this_year)
return(df1$reviews_this_year)
}
airbnb_data2020$reviews_this_year = get_reviews(airbnb_data2020, airbnb_data2019)
airbnb_data2019$reviews_this_year = get_reviews(airbnb_data2019, airbnb_data2018)
airbnb_data2018$reviews_this_year = get_reviews(airbnb_data2018, airbnb_data2017)
airbnb_data2017$reviews_this_year = get_reviews(airbnb_data2017, airbnb_data2016)
airbnb_data2016$reviews_this_year = get_reviews(airbnb_data2016, airbnb_data2015)
airbnb_data2015$reviews_this_year = airbnb_data2015$number_of_reviews
airbnb_data = do.call("rbind", list(airbnb_data2020,
airbnb_data2019,
airbnb_data2018,
airbnb_data2017,
airbnb_data2016,
airbnb_data2015))
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
intensity = year0$reviews_this_year,
blur = 2,
max = quant_95_review_max,
cellSize = 2,
radius = 2
)
map = leaflet() %>% addProviderTiles(providers$CartoDB.Voyager)
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
intensity = year0$price,
blur = 2,
max = quant_98_price_max,
cellSize = 3,
radius = 2
)
map  %>%
addHeatmap( #Adds a heatmap
lng =  year0$longitude,
lat =  year0$latitude,
intensity = year0$reviews_this_year,
blur = 2,
max = quant_95_review_max,
cellSize = 2,
radius = 2
)
treemap_data1 = year0 %>%
group_by(neighbourhood, neighbourhood_group) %>%
summarize(listing_days = sum(availability_365),
avg_price = mean(price))
ggplot(treemap_data1, aes(area = listing_days, fill = avg_price,
label = neighbourhood,
subgroup = neighbourhood_group)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.6, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "grey81", place = "topleft", reflow = T) +
scale_fill_gradient2(low="white", mid="yellow", high="red", midpoint = 170,
limits = c(80, 400), oob = scales::squish) +
labs(fill = "Price per Night",
title = 'Number of Listings by Neighbourhood\nand Price Heatmap')
ggplot(treemap_data1, aes(area = listing_days, fill = avg_price,
label = neighbourhood,
subgroup = neighbourhood_group)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.6, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "grey81", place = "topleft", reflow = T) +
scale_fill_gradient2(low="white", mid="yellow", high="red", midpoint = 170,
limits = c(80, 400)) +
labs(fill = "Price per Night",
title = 'Number of Listings by Neighbourhood\nand Price Heatmap')
ggplot(treemap_data1, aes(area = listing_days, fill = avg_price,
label = neighbourhood,
subgroup = neighbourhood_group)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.6, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "grey81", place = "topleft", reflow = T) +
scale_fill_gradient2(low="white", mid="yellow", high="red", midpoint = 170,
limits = c(80, 400), oob = scales::squish) +
labs(fill = "Price per Night",
title = 'Number of Listings by Neighbourhood\nand Price Heatmap')
treemap_data2 = year0 %>%
group_by(neighbourhood, neighbourhood_group) %>%
summarize(market_size = sum(availability_by_price),
avg_price = mean(price))
ggplot(treemap_data2, aes(area = market_size, fill = avg_price,
label = neighbourhood,
subgroup = neighbourhood_group)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.6, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "grey81", place = "topleft", reflow = T) +
scale_fill_gradient2(low="white", mid="yellow", high="red", midpoint = 170,
limits = c(80, 400), oob = scales::squish) +
labs(fill = "Price per Night",
title = 'Market Size by Neighbourhood\nand Price Heatmap')
treemap_data3 = year0 %>%
group_by(neighbourhood, neighbourhood_group) %>%
summarize(market_size = sum(availability_by_price),
total_listingdays = sum(availability_365),
total_reviews = sum(reviews_this_year),
reviews_per_listingdays = total_reviews/total_listingdays)
ggplot(treemap_data3, aes(area = market_size,
fill = reviews_per_listingdays,
label = neighbourhood,
subgroup = neighbourhood_group)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.6, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "grey81", place = "topleft", reflow = T) +
scale_fill_gradient2(low="white", mid="yellow", high="red",
#midpoint = 0.04,
limits = c(0, 0.1),
oob = scales::squish) +
labs(fill = "RPLD",
title = 'Market Size by Neighbourhood and\nReviews per Listing Days Heatmap') +
theme(legend.position="none", plot.title = element_text(hjust = 0.0))
total_market_size_2020 = sum(airbnb_data2020$availability_by_price)
total_market_size_2020 = sum(airbnb_data2020$availability_by_price)
market_size_filter = 1000000
total_market_size_2020 = sum(year0$availability_by_price)
market_size_filter = 1000000
total_market_size = sum(year0$availability_by_price)
scatter_plot_data = year0 %>%
group_by(neighbourhood) %>%
summarize(market_size = sum(availability_by_price),
total_listingdays = sum(availability_365),
total_reviews = sum(reviews_this_year),
reviews_per_listingdays = total_reviews/total_listingdays,
market_share = market_size / total_market_size) %>%
mutate(market_share = as.numeric(format(round(market_share, 4), nsmall = 2))) %>%
filter(market_size>market_size_filter) %>%
top_n(n = 15, wt = reviews_per_listingdays) %>%
arrange(desc(reviews_per_listingdays))
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="tomato2")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
total_market_size = sum(airbnb_data2016$availability_by_price)
market_size_filter = 1000000
scatter_plot_data = year0 %>%
group_by(neighbourhood) %>%
summarize(market_size = sum(availability_by_price),
total_listingdays = sum(availability_365),
total_reviews = sum(reviews_this_year),
reviews_per_listingdays = total_reviews/total_listingdays,
market_share = market_size / total_market_size) %>%
mutate(market_share = as.numeric(format(round(market_share, 4), nsmall = 2))) %>%
filter(market_size>market_size_filter) %>%
top_n(n = 15, wt = reviews_per_listingdays) %>%
arrange(desc(reviews_per_listingdays))
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="tomato2")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
total_market_size = sum(year0$availability_by_price)
market_size_filter = 1000000
scatter_plot_data = year0 %>%
group_by(neighbourhood) %>%
summarize(market_size = sum(availability_by_price),
total_listingdays = sum(availability_365),
total_reviews = sum(reviews_this_year),
reviews_per_listingdays = total_reviews/total_listingdays,
market_share = market_size / total_market_size) %>%
mutate(market_share = as.numeric(format(round(market_share, 4), nsmall = 2))) %>%
filter(market_size>market_size_filter) %>%
top_n(n = 15, wt = reviews_per_listingdays) %>%
arrange(desc(reviews_per_listingdays))
ggplot(scatter_plot_data, aes(x = reorder(neighbourhood, reviews_per_listingdays) ,
y = reviews_per_listingdays,
label = scales::percent(market_share),
size = market_size)) +
geom_point(col="tomato2")  +
geom_segment(aes(x = neighbourhood,
xend = neighbourhood,
y = min(reviews_per_listingdays),
yend = max(reviews_per_listingdays)),
linetype = "dashed",
size = 0.1,
alpha = 0.2) +
#ylim(-2.5, 2.5) +
labs(title="Ratio of Reviews per Listing Days",
subtitle="Top 15 Neighbourhoods",
y = "Reviews per Listing Days",
size = "Market Size") +
theme_classic() +
theme(axis.title.y = element_blank()) +
scale_size(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
coord_flip()
